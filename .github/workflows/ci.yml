name: 🔍 CI - Quality Assurance

on:
  push:
    branches: [main, develop, new-structure]
  pull_request:
    branches: [main, develop, new-structure]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: 🧪 Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 🔧 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "pnpm"

      - name: 📋 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint check
        run: pnpm lint

      - name: 🎨 Format check
        run: pnpm format --check

      - name: 📝 Type check
        run: pnpm type-check

      - name: 🧪 Run tests
        run: pnpm test:run

      - name: 📊 Generate coverage
        run: pnpm test:coverage

      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-verification:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: quality-checks

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build

      - name: 📊 Analyze bundle
        run: pnpm build:analyze

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  security-audit:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Audit dependencies
        run: pnpm audit --audit-level moderate

      - name: 🛡️ Check for vulnerabilities
        run: |
          if [ -f "package-lock.json" ]; then
            npx audit-ci --moderate
          else
            echo "Using pnpm audit instead"
            pnpm audit --audit-level moderate
          fi

  lighthouse-audit:
    name: 🚦 Lighthouse Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: build-verification
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build for preview
        run: pnpm build

      - name: 🚦 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: "./lighthouserc.json"
          uploadArtifacts: true
          temporaryPublicStorage: true

  summary:
    name: 📋 Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, build-verification, security-audit]
    if: always()

    steps:
      - name: 📊 Check results
        run: |
          if [[ "${{ needs.quality-checks.result }}" == "success" && 
                "${{ needs.build-verification.result }}" == "success" && 
                "${{ needs.security-audit.result }}" == "success" ]]; then
            echo "✅ All checks passed! Ready for deployment."
          else
            echo "❌ Some checks failed. Please review the results."
            exit 1
          fi
