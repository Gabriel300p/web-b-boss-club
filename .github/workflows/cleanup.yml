name: 🧹 Cleanup

on:
  schedule:
    # Roda todo domingo às 02:00 UTC
    - cron: "0 2 * * 0"
  workflow_dispatch:

jobs:
  cleanup-old-deployments:
    name: 🗑️ Cleanup Old Deployments
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🗑️ Remove old preview deployments
        run: |
          echo "🗑️ Cleaning up old preview deployments..."

          # Get deployments older than 7 days
          WEEK_AGO=$(date -d '7 days ago' --iso-8601)

          # List and remove old preview deployments
          vercel ls --token=${{ secrets.VERCEL_TOKEN }} --scope=${{ secrets.VERCEL_ORG_ID }} \
            | awk -v date="$WEEK_AGO" '$3 < date && $4 != "PRODUCTION" {print $1}' \
            | head -20 \
            | xargs -I {} vercel rm {} --yes --token=${{ secrets.VERCEL_TOKEN }}

          echo "✅ Cleanup completed"

  cleanup-artifacts:
    name: 🗂️ Cleanup Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🗑️ Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < oneWeekAgo) {
                console.log(`Deleting artifact: ${artifact.name} (${artifact.created_at})`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
              }
            }

  health-check:
    name: 🩺 Health Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 🌐 Check production health
        run: |
          echo "🩺 Checking production health..."

          # Replace with your actual production URL
          PROD_URL="https://your-production-domain.vercel.app"

          # Check if site is responding
          STATUS=$(curl -o /dev/null -s -w "%{http_code}" $PROD_URL)

          if [ $STATUS -eq 200 ]; then
            echo "✅ Production site is healthy (HTTP $STATUS)"
          else
            echo "❌ Production site is not responding properly (HTTP $STATUS)"
            exit 1
          fi

      - name: 📊 Performance baseline check
        run: |
          echo "📊 Running basic performance check..."

          # You can add more sophisticated performance monitoring here
          # For now, just ensure the site loads within reasonable time

          START_TIME=$(date +%s%N)
          curl -s "https://your-production-domain.vercel.app" > /dev/null
          END_TIME=$(date +%s%N)

          DURATION=$(( (END_TIME - START_TIME) / 1000000 )) # Convert to milliseconds

          if [ $DURATION -lt 3000 ]; then
            echo "✅ Load time: ${DURATION}ms (within threshold)"
          else
            echo "⚠️ Load time: ${DURATION}ms (slower than expected)"
          fi
